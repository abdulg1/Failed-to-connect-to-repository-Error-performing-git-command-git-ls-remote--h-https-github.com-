{"version":3,"sources":["components/BankLogo/images/Sadaqah.png","components/BrandLogo/images/mastercard.svg","components/BrandLogo/images/visa.svg","components/BrandLogo/images/hipercard.svg","components/BrandLogo/images/elo.svg","components/BankLogo/images/Rectangle.png","components/BankLogo/helpers/bankLogos.js","components/BankLogo/Banklogo.js","components/BrandLogo/helpers/brandLogos.js","components/BrandLogo/brandLogos.js","components/PaymentCard/index.js","Payment.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","caixa","normal","black","caixaWhite","BankLogo","bank","model","type","bankLogos","src","alt","className","defaultProps","mastercard","visa","hipercard","elo","BrandLogo","brand","brandLogos","cardClasses","flipped","classNames","PaymentCard","number","cvv","expiration","holderName","replace","Payment","props","stripe","useStripe","elements","useElements","fullName","email","useState","cardType","setCardType","name","setName","useEffect","handleSubmit","event","a","setIsLoading","preventDefault","confirmCardPayment","clientSecret","payment_method","card","getElement","CardElement","billing_details","result","error","onError","message","paymentIntent","status","onSuccess","id","onSubmit","style","margin","display","justifyContent","onChange","target","value","width","marginTop","marginBottom","stripePromise","loadStripe","App","React","setStatus","success","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71acf0b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Sadaqah.bdb1afe6.png\";","module.exports = __webpack_public_path__ + \"static/media/mastercard.fa5695b4.svg\";","module.exports = __webpack_public_path__ + \"static/media/visa.ea9c9f96.svg\";","module.exports = __webpack_public_path__ + \"static/media/hipercard.d73dbd10.svg\";","module.exports = __webpack_public_path__ + \"static/media/elo.ed415b90.svg\";","module.exports = __webpack_public_path__ + \"static/media/Rectangle.53e48dbe.png\";","\nimport caixaWhite from '../images/Sadaqah.png'\n\n\n\nexport default {\n  \n  caixa: {\n    normal: {\n      black: caixaWhite,\n    },\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport bankLogos from './helpers/bankLogos'\n\nimport './style.css'\n\nconst BankLogo = ({\n  bank,\n  model,\n  type,\n}) => {\n  if (\n    !bankLogos[bank] ||\n    !bankLogos[bank][model] ||\n    !bankLogos[bank][model][type]\n  ) {\n    return null\n  }\n\n  return (\n    <img\n      src={bankLogos[bank][model][type]}\n      alt={bank}\n      className=\"bankLogo caixa-normal-black\"\n    />\n  )\n}\n\nBankLogo.propTypes = {\n  bank: PropTypes.string,\n  model: PropTypes.string,\n  type: PropTypes.string,\n}\n\nBankLogo.defaultProps = {\n  bank: '',\n  model: '',\n  type: '',\n}\n\nexport default BankLogo\n","import mastercard from '../images/mastercard.svg'\nimport visa from '../images/visa.svg'\nimport hipercard from '../images/hipercard.svg'\nimport elo from '../images/elo.svg'\n\nexport default {\n  mastercard,\n  visa,\n  hipercard,\n  elo,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport brandLogos from './helpers/brandLogos'\n\nimport './style.css'\n\nconst BrandLogo = ({\n  brand,\n  bank,\n  model,\n  type,\n}) => {\n  if (!brandLogos[brand]) {\n    return null\n  }\n  const classcss =\"brandLogo\"\n  debugger;\n  return (\n   \n    <img\n      src={brandLogos[brand]}\n      alt={brand}\n      className={classcss}\n    />\n  )\n}\n\nBrandLogo.propTypes = {\n  brand: PropTypes.string,\n  bank: PropTypes.string,\n  model: PropTypes.string,\n  type: PropTypes.string,\n}\n\nBrandLogo.defaultProps = {\n  brand: '',\n  bank: '',\n  model: '',\n  type: '',\n}\n\nexport default BrandLogo\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport './style.css'\nimport logo from './../BankLogo/images/Rectangle.png'\nimport BankLogo from '../BankLogo/Banklogo'\n\nimport BrandLogo from '../BrandLogo/brandLogos'\n\nconst cardClasses = (bank, model, type, flipped, className) => {\n  const cardClassName = `${bank}-${model}-${type}`\n\n  return classNames(\n    \"card\",\n    \"caixa-normal-black\",\n    {\n      \"flipped\": flipped,\n      \"caixa-normal-black\": (bank && model && type),\n    },\n    className,\n  )\n}\n\n\nconst formatCardNumber = cardNumber =>\n  cardNumber.replace(/\\s/g, '').replace(/(\\d{4})/g, '$1 ')\n\nconst PaymentCard = ({\n  bank,\n  model,\n  type,\n  number,\n  cvv,\n  expiration,\n  holderName,\n  brand,\n  flipped,\n  className,\n}) => (\n  <div className=\"wrapper\">\n    <div className={cardClasses(\"caixa\", \"normal\", \"black\", false, className)}>\n   \n      <div className=\"front\">\n        <BankLogo\n          bank={bank}\n          model={model}\n          type={type}\n        />\n        \n        <div className=\"chip\" >\n          <div className=\"horizontalLine\" />\n          <div className=\"verticalLine\" />\n        </div>\n        <div className=\"number\">\n          {formatCardNumber(number)}\n        </div>\n        <div className=\"expiration\">\n          {expiration}\n        </div>\n        <div className=\"holderName\">\n          {holderName}\n        </div>\n        <BrandLogo\n          brand={brand}\n          bank={bank}\n          model={model}\n          type={type}\n        />\n      </div>\n      <div className=\"back\">\n        <div className=\"cvv\">\n          {cvv}\n        </div>\n      </div>\n    </div>\n    </div>\n\n)\n\nPaymentCard.propTypes = {\n  bank: PropTypes.string,\n  model: PropTypes.string,\n  type: PropTypes.string,\n  brand: PropTypes.string,\n  number: PropTypes.string,\n  cvv: PropTypes.string,\n  holderName: PropTypes.string,\n  expiration: PropTypes.string,\n  flipped: PropTypes.bool,\n  className: PropTypes.string,\n}\n\nPaymentCard.defaultProps = {\n  bank: '',\n  model: '',\n  type: '',\n  brand: '',\n  number: '•••• •••• •••• ••••',\n  cvv: '•••',\n  holderName: 'Nome Completo',\n  expiration: 'MM/AA',\n  flipped: false,\n  className: null,\n}\n\nexport default PaymentCard\n","import React , { useEffect, useState }  from \"react\";\nimport PaymentCard from './components/PaymentCard'\nimport {\n  Elements,\n  CardElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nconst Payment = (props) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { fullName, email } = props;\n  const [cardType, setCardType] = useState(\"\");\n  const [name, setName] = useState(\"\");\n\n\n  useEffect(() => {}, []);\n\n  const handleSubmit = async (event) => {\n    // Block native form submission.\n    props.setIsLoading(true);\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    }\n    const result = await stripe.confirmCardPayment(props.clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: fullName,\n        },\n      },\n      // receipt_email: email,\n    });\n    props.setIsLoading(false);\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      props.onError(result.error.message);\n      // console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === \"succeeded\") {\n        // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n        // props.onClose();\n        props.onSuccess();\n      }\n    }\n  };\n\n  const onChangeCard = (event) => {\n    debugger;\n    setCardType(event.brand);\n  };\n  const onName = (event) => {\n    debugger;\n    setName(event.target.value);\n  };\n\n\n  return (\n    <div>\n    \n             \n    <form id=\"stripeForm\" onSubmit={handleSubmit}>\n\n      <div\n        style={{ margin: \"2rem\", display: \"flex\", justifyContent: \"center\" }}\n      >\n        <label>\n          Card holder name:\n          <input type=\"text\"  onChange={onName}  />\n             </label>\n        <div>\n          <div>\n            <PaymentCard\n              bank=\"caixa\"\n              model=\"normal\"\n              type=\"black\"\n              style={{ width: \"100%!important\" }}\n              brand={cardType}\n              number=\"1234567890123456\"\n              cvv=\"123\"\n              holderName={name?name:\"MOHAMMAD ABDULLAH\"}\n              expiration=\"09/24\"\n              flipped={false}\n            />\n          </div>\n          <div>\n            <div style={{ marginTop: \"2rem\", marginBottom: \"-1rem\" }}>\n              <CardElement onChange={onChangeCard} />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* <PaymentRequestButtonElement/> */}\n    </form>\n    </div>\n  );\n};\n\n\nexport default Payment;\n\n\n  \n  \n  ","import React from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nimport Payment from './Payment'\nimport {\n  Elements,\n  CardElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\n\n\n \n \nconst CheckoutForm = ({ success }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\n      type: \"card\",\n      card: elements.getElement(CardElement)\n      \n    });\n\n    if (!error) {\n      const { id } = paymentMethod;\n\n      try {\n        const { data } = await axios.post(\"/api/charge\", { id, amount: 1099 });\n        console.log(data);\n        success();\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      style={{ maxWidth: \"400px\", margin: \"0 auto\" }}\n    >\n      <h2>Price: $10.99 USD</h2>\n     <Payment/>\n      <CardElement />\n      <button type=\"submit\" disabled={!stripe}>\n        Pay\n      </button>\n    </form>\n  );\n};\n\n// you should use env variables here to not commit this\n// but it is a public key anyway, so not as sensitive\nconst stripePromise = loadStripe(\"pk_test_NqtC5d58MB9RN6aZ6rORtJCb\");\n\nconst App = () => {\n  const [status, setStatus] = React.useState(\"ready\");\n\n  if (status === \"success\") {\n    return <div>Congrats on your empanadas!</div>;\n  }\n\n  return (\n  \n    <Elements stripe={stripePromise}>\n      <Payment\n        success={() => {\n          setStatus(\"success\");\n        }}\n      />\n    </Elements>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}